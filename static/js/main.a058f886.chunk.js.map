{"version":3,"sources":["Projects/messengerApp/firebase.jsx","Projects/messengerApp/Mysql.jsx","Projects/messengerApp/Messenger.jsx","reportWebVitals.js","index.js"],"names":["firebase_db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","Mysql","useState","user","setUser","pass","setPass","data","setData","ShowData","Axios","get","then","response","Update","idd","id","password","post","console","log","action","type","onChange","e","target","value","placeholder","onClick","preventDefault","className","map","index","username","iddd","dlt","Messenger","setMsg","useEffect","collection","orderBy","onSnapshot","snap","docs","values","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"wNAgBeA,EAbKC,IAASC,cAAc,CACxCC,OAAQ,0CACRC,WAAY,qCACZC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIcC,Y,gCCqEjBC,EAhFD,WAAO,IAAD,EACOC,mBAAS,IADhB,mBACVC,EADU,KACJC,EADI,OAEOF,mBAAS,IAFhB,mBAEVG,EAFU,KAEJC,EAFI,OAIOJ,mBAAS,CAAC,KAJjB,mBAIVK,EAJU,KAIJC,EAJI,KAMXC,EAAW,WACdC,IAAMC,IAAI,wDAAwDC,MAAK,SAACC,GACrEL,EAAQK,EAASN,UAiBvB,IAAMO,EAAS,SAACC,GACb,IAAMC,EAAKD,EACLE,EAAWZ,EACjBK,IAAMQ,KAAK,sDAAuD,CAACF,GAAIA,EAAIC,SAAUA,IAAWL,MAAK,SAACC,GACnGJ,QAKN,OAFAU,QAAQC,IAAIb,GAGT,qCACG,uBAAMc,OAAO,GAAb,UACG,uBACGC,KAAK,OACLC,SACG,SAACC,GACEpB,EAAQoB,EAAEC,OAAOC,QAGvBA,MAAOvB,EACPwB,YAAY,aACf,uBACGL,KAAK,OACLC,SACG,SAACC,GACElB,EAAQkB,EAAEC,OAAOC,QAGvBA,MAAOrB,EACPsB,YAAY,aACf,wBAAQC,QA5CJ,SAACJ,GACXA,EAAEK,iBACFnB,IAAMQ,KAAK,sDAAuD,CAACf,KAAMA,EAAME,KAAMA,IAAOO,MAAK,WAC9FH,OAEHL,EAAQ,IACRE,EAAQ,KAsCF,qBAGH,sBAAKwB,UAAU,OAAf,UACG,wBAAQF,QAASnB,EAAjB,uBACA,qBAAKqB,UAAU,SAAf,SAEMvB,EAAKwB,KAAI,SAACL,EAAOM,GACd,OACG,mCACG,sBAAKF,UAAU,OAAf,UACG,4BAAIJ,EAAMO,WAAa,uBACvB,4BAAIP,EAAMrB,OAAS,uBACnB,wBAAQuB,QAAS,kBAjD5C,SAAaM,GACV,IAAMlB,EAAKkB,EACXxB,IAAMQ,KAAK,sDAAuD,CAACF,GAAIA,IAAKJ,MAAK,SAACC,GAC/EJ,OA8C4C0B,CAAIT,EAAMV,KAAjC,oBAAqD,uBACrD,wBAAQY,QAASd,EAAOY,EAAMV,IAA9B,qCCTfoB,EAnDG,WAAO,IAAD,EACKlC,mBAAS,IADd,gCAEKA,mBAAS,CAAC,MAFf,mBAELmC,GAFK,aAGWnC,mBAAS,IAHpB,6BAQrBoC,qBAAU,cAEP,IAEHA,qBAAU,WACPhD,EAAYiD,WAAW,YAAYC,QAAQ,YAAa,OAAOC,YAAW,SAACC,GACxEL,EACGK,EAAKC,KAAKZ,KAAI,SAACa,EAAQZ,GACpB,OAAOY,EAAOrC,gBAIvB,IA0BH,OACG,cAAC,EAAD,KC/CSsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,QCmBdO,IAASC,OACT,mCACI,cAAC,IAAD,UACI,cAAC,EAAD,QAGPC,SAASC,eAAe,SAMzBX,M","file":"static/js/main.a058f886.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\n/* this function with config codes are for connecting to the firebase account */\r\nconst firebaseApp = firebase.initializeApp({\r\n   apiKey: \"AIzaSyD04hrl7lVKsIxUEi9SyHxlI01TTmeJ2U8\",\r\n   authDomain: \"messengerapp-7ffba.firebaseapp.com\",\r\n   projectId: \"messengerapp-7ffba\",\r\n   storageBucket: \"messengerapp-7ffba.appspot.com\",\r\n   messagingSenderId: \"864450919439\",\r\n   appId: \"1:864450919439:web:6f91d288d1d147aa09777a\",\r\n   measurementId: \"G-T590X0DKND\"\r\n});\r\n\r\n/* then accessing the firestroe */\r\nconst firebase_db = firebaseApp.firestore();\r\n\r\nexport default firebase_db;","import {React, useState} from \"react\";\r\nimport Axios from \"axios\";\r\n\r\nconst Mysql = () => {\r\n   const [user, setUser] = useState(\"\");\r\n   const [pass, setPass] = useState(\"\");\r\n\r\n   const [data, setData] = useState([{}]);\r\n\r\n   const ShowData = () => {\r\n      Axios.get(\"https://git.heroku.com/mysql-server-omar.git/getData\").then((response) => {\r\n         setData(response.data);\r\n      });\r\n   }\r\n   const Send = (e) => {\r\n      e.preventDefault();\r\n      Axios.post(\"https://git.heroku.com/mysql-server-omar.git/create\", {user: user, pass: pass}).then(() => {\r\n         ShowData();\r\n      });\r\n      setUser(\"\");\r\n      setPass(\"\");\r\n   }\r\n   function dlt(iddd) {\r\n      const id = iddd;\r\n      Axios.post(\"https://git.heroku.com/mysql-server-omar.git/delete\", {id: id}).then((response) => {\r\n         ShowData();\r\n      });\r\n   }\r\n   const Update = (idd) => {\r\n      const id = idd;\r\n      const password = pass;\r\n      Axios.post(\"https://git.heroku.com/mysql-server-omar.git/update\", {id: id, password: password}).then((response) => {\r\n         ShowData();\r\n      });\r\n   }\r\n   console.log(data);\r\n\r\n   return(\r\n      <>\r\n         <form action=\"\">\r\n            <input \r\n               type=\"text\" \r\n               onChange={\r\n                  (e) => {\r\n                     setUser(e.target.value);\r\n                  }\r\n               } \r\n               value={user}\r\n               placeholder=\"username\"/>\r\n            <input \r\n               type=\"text\" \r\n               onChange={\r\n                  (e) => {\r\n                     setPass(e.target.value);\r\n                  }\r\n               } \r\n               value={pass}\r\n               placeholder=\"password\"/>\r\n            <button onClick={Send}>Send</button>\r\n         </form>\r\n\r\n         <div className=\"mt-5\">\r\n            <button onClick={ShowData}>Show Data</button>\r\n            <div className=\"result\">\r\n               {\r\n                  data.map((value, index) => {\r\n                     return (\r\n                        <>\r\n                           <div className=\"my-3\">\r\n                              <b>{value.username}</b><br/>\r\n                              <b>{value.pass}</b><br/>\r\n                              <button onClick={() => dlt(value.id)}>Delete</button><br/>\r\n                              <button onClick={Update(value.id)}>Update</button>\r\n                           </div>\r\n                        </>\r\n                     );\r\n                  })\r\n               }\r\n            </div>\r\n         </div>\r\n      </>\r\n   )\r\n}\r\nexport default Mysql;","import React, {useState, useEffect} from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport firebase_db from \"./firebase\";\r\nimport \"./Messenger.css\";\r\nimport firebase from \"firebase\";\r\nimport FlipMove from 'react-flip-move';\r\nimport Msg from \"./Msg\";\r\nimport Mysql from \"./Mysql\";\r\nimport UI from \"./Ui\";\r\nimport Reg_check from \"./Is_reg\";\r\nimport Register from \"./Register\";\r\n\r\nconst Messenger = () => {\r\n   const [input, setInput] = useState('');\r\n   const [message, setMsg] = useState([{}]);\r\n   const [username, setUsername] = useState('');\r\n\r\n   /* useEffect function runs every time for a condition */\r\n   /* in this case, I give a condition to run the funciton if the when the page loads(empty condition) */\r\n\r\n   useEffect(() => {\r\n      // setUsername(prompt(\"What is your name?\"));\r\n   }, []);\r\n\r\n   useEffect(() => {\r\n      firebase_db.collection(\"msg_data\").orderBy(\"timestamp\", \"asc\").onSnapshot((snap) => { /* orderBy -> \"asc\" or \"desc\" */\r\n         setMsg(\r\n            snap.docs.map((values, index) => {\r\n               return values.data();\r\n            })\r\n         );\r\n      });\r\n   }, []);\r\n\r\n   /* window.onkeypress = (e) => {\r\n      const inputBox = document.querySelector(\"#msgInput\");\r\n      if(document.activeElement == inputBox){\r\n         if(e.keyCode == 13){\r\n            document.querySelector(\"#sendBtn\").click();\r\n         }\r\n      }\r\n      \r\n   }; */\r\n\r\n   const sendMsg = (e) => {\r\n      e.preventDefault();\r\n      // setMsg([...message, {username: username, message: input}]);\r\n       /* for storing the messeges in array one by one instead of changing the previous messenge */\r\n\r\n      firebase_db.collection(\"msg_data\").add({\r\n         username: username,\r\n         message: input,\r\n         timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n      });   \r\n      setInput('');\r\n   }\r\n   \r\n\r\n   return(\r\n      <Mysql/>\r\n   )\r\n}\r\n\r\nexport default Messenger;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css'; // importing bootstrap\nimport 'bootstrap/dist/js/bootstrap.bundle.js'; // importing bootstrap's JS\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\n\n// import Demo from '../src/Projects/Practice Basic/Demo';\n// import Demo1 from '../src/Projects/Practice Basic/dOne';\n// import Demo2 from '../src/Projects/Practice Basic/dTwo';\n// import PracticeState from \"../src/Projects/Practice Basic/UseState\";\n// import Context from \"./Projects/Practice Basic/context/Context\";\n// import IE_practice from \"./Projects/Practice Basic/import & export/Main\";\n// import Params from \"./Projects/Practice Basic/params, location, history/Main\";\n\n// import Note from \"../src/Projects/note app/Main\";\n// import Avatar from '../src/Projects/Avatar/Avatar';\n// import Linked from \"../src/Projects/Linked Pages/LinkPage\";\nimport Messenger from \"../src/Projects/messengerApp/Messenger\";\n\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\";\n// \"react-router-dom\" is used for redirecting pages and links without page reloading like the Facebook\n// and you have to keep all the pages inside the <BrowserRouter> block for applying this action...  there i'll link all the pages with the \"LinkPage.js\" file then import it here\n\nReactDOM.render(\n<>\n    <BrowserRouter>\n        <Messenger/>\n    </BrowserRouter>\n</> // these \"<> </>\" are called react fragment\n,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}